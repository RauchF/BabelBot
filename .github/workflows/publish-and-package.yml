name: Publish and Package

on:
  push:
    tags:
      - '*'
    
env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    name: Build pre-compiled packages
    strategy:
      matrix: 
        target_runtime: [win-x64, linux-x64, linux-arm, linux-arm64]
        archive: [zip, tar]
        exclude:
          - target_runtime: win-x64
            archive: tar
          - target_runtime: linux-x64
            archive: zip
          - target_runtime: linux-arm
            archive: zip
          - target_runtime: linux-arm64
            archive: zip

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Publish
      run: dotnet publish -c Release -r ${{ matrix.target_runtime }} --self-contained true -o ${{ github.workspace }}/Build/BabelBot-${{ matrix.target_runtime }}
    - name: Package
      if: matrix.archive == 'zip'
      run: zip -r ${{ github.workspace }}/BabelBot_${{ matrix.target_runtime }}.zip BabelBot-${{ matrix.target_runtime }}
      working-directory: ${{ github.workspace }}/Build
    - name: Package
      if: matrix.archive == 'tar'
      run: tar -czf ${{ github.workspace }}/BabelBot_${{ matrix.target_runtime }}.tar.gz BabelBot-${{ matrix.target_runtime }}
      working-directory: ${{ github.workspace }}/Build
    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        path: BabelBot_*.*

  build_docker_image:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Log into Docker registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
          
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
